// --- Configuration ---
// REPLACE with your deployed contract address
const CONTRACT_ADDRESS = "0x079C35A26ce5608915Da8dC7BE835F2BDC817AEf"; 
// REPLACE with your contract's ABI (the 'abi' array from your JSON output)
const CONTRACT_ABI = [
   {
  "_format": "hh-sol-artifact-1",
  "contractName": "ZkpVoting",
  "sourceName": "contracts/ZkpVoting.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "electionId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "ElectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "electionId",
          "type": "string"
        }
      ],
      "name": "ElectionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "electionId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "candidateIndex",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_durationInMinutes",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_candidateNames",
          "type": "string[]"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        }
      ],
      "name": "endElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        }
      ],
      "name": "getCandidateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCandidateName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "candidateIndex",
          "type": "uint256"
        }
      ],
      "name": "getVotesForCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        }
      ],
      "name": "isElectionEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        }
      ],
      "name": "showResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract Verifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionId",
          "type": "string"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "candidateIndex",
          "type": "uint256"
        }
      ],
      "name": "voteWithZKProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dc738038062001dc78339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611c9d806200012a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ae179ebc11610066578063ae179ebc1461016d578063c9a350cd1461019d578063cde5c32c146101cd578063d6afb55c146101fd578063fe43bc07146102195761009e565b8063199e4411146100a35780632b7ac3f3146100d35780636225a1b6146100f157806398d16f751461010d5780639bc8e4701461013d575b600080fd5b6100bd60048036038101906100b89190610d87565b610235565b6040516100ca9190610df2565b60405180910390f35b6100db610272565b6040516100e89190610e8c565b60405180910390f35b61010b60048036038101906101069190610f12565b610296565b005b61012760048036038101906101229190610fbe565b61064b565b6040516101349190610df2565b60405180910390f35b61015760048036038101906101529190610fbe565b610676565b6040516101649190611022565b60405180910390f35b61018760048036038101906101829190610fbe565b6106c1565b6040516101949190610df2565b60405180910390f35b6101b760048036038101906101b29190610d87565b6106ec565b6040516101c491906110bc565b60405180910390f35b6101e760048036038101906101e29190610fbe565b6107b1565b6040516101f49190611022565b60405180910390f35b610217600480360381019061021291906111bf565b6107c3565b005b610233600480360381019061022e9190610fbe565b610a37565b005b600060018360405161024791906112b6565b9081526020016040518091039020600801600083815260200190815260200160002054905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b856002816040516102a791906112b6565b908152602001604051809103902060009054906101000a900460ff16610302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f990611319565b60405180910390fd5b600060018860405161031491906112b6565b908152602001604051809103902090508060030160009054906101000a900460ff16610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90611385565b60405180910390fd5b80600201544211156103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b3906113f1565b60405180910390fd5b806007016000856001600481106103d6576103d5611411565b5b602002013560001b815260200190815260200160002060009054906101000a900460ff161561043a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104319061148c565b60405180910390fd5b80600501548310610480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610477906114f8565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe8c13b898989896040518563ffffffff1660e01b81526004016104e29493929190611600565b602060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611673565b905080610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c906116ec565b60405180910390fd5b60018260070160008760016004811061058157610580611411565b5b602002013560001b815260200190815260200160002060006101000a81548160ff0219169083151502179055508160040160008154809291906105c39061173b565b919050555081600801600085815260200190815260200160002060008154809291906105ee9061173b565b91905055508860405161060191906112b6565b60405180910390207f82ea01a4479f27996bbe8de24f4c8d962035fe2f32a2b130c8c9ca593ab91aa8856040516106389190610df2565b60405180910390a2505050505050505050565b600060018260405161065d91906112b6565b9081526020016040518091039020600401549050919050565b60008060018360405161068991906112b6565b908152602001604051809103902090508060030160019054906101000a900460ff16806106b95750806002015442115b915050919050565b60006001826040516106d391906112b6565b9081526020016040518091039020600501549050919050565b60606001836040516106fe91906112b6565b90815260200160405180910390206006016000838152602001908152602001600020805461072b906117b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610757906117b2565b80156107a45780601f10610779576101008083540402835291602001916107a4565b820191906000526020600020905b81548152906001019060200180831161078757829003601f168201915b5050505050905092915050565b60006107bc82610676565b9050919050565b6002846040516107d391906112b6565b908152602001604051809103902060009054906101000a900460ff161561082f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108269061182f565b60405180910390fd5b600281511015610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061189b565b60405180910390fd5b600060018560405161088691906112b6565b90815260200160405180910390209050838160000190816108a79190611a5d565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603c836108f89190611b2f565b426109039190611b71565b816002018190555060018160030160006101000a81548160ff02191690831515021790555060008160030160016101000a81548160ff0219169083151502179055508151816005018190555060005b82518110156109a55782818151811061096e5761096d611411565b5b602002602001015182600601600083815260200190815260200160002090816109979190611a5d565b508080600101915050610952565b5060016002866040516109b891906112b6565b908152602001604051809103902060006101000a81548160ff021916908315150217905550846040516109eb91906112b6565b60405180910390207f184d51cdcac34bb27b7a2fc48df2288bc62dcad236c9e586b3b2ff0ae96489e7858360020154604051610a28929190611ba5565b60405180910390a25050505050565b80600181604051610a4891906112b6565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90611c47565b60405180910390fd5b81600281604051610af891906112b6565b908152602001604051809103902060009054906101000a900460ff16610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611319565b60405180910390fd5b6000600184604051610b6591906112b6565b9081526020016040518091039020905060008160030160006101000a81548160ff02191690831515021790555060018160030160016101000a81548160ff02191690831515021790555083604051610bbd91906112b6565b60405180910390207f2b77cefdcd8726daf4c7109ee1b2f7b6e696783da95bccd39ee47478e017d06760405160405180910390a250505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c5e82610c15565b810181811067ffffffffffffffff82111715610c7d57610c7c610c26565b5b80604052505050565b6000610c90610bf7565b9050610c9c8282610c55565b919050565b600067ffffffffffffffff821115610cbc57610cbb610c26565b5b610cc582610c15565b9050602081019050919050565b82818337600083830152505050565b6000610cf4610cef84610ca1565b610c86565b905082815260208101848484011115610d1057610d0f610c10565b5b610d1b848285610cd2565b509392505050565b600082601f830112610d3857610d37610c0b565b5b8135610d48848260208601610ce1565b91505092915050565b6000819050919050565b610d6481610d51565b8114610d6f57600080fd5b50565b600081359050610d8181610d5b565b92915050565b60008060408385031215610d9e57610d9d610c01565b5b600083013567ffffffffffffffff811115610dbc57610dbb610c06565b5b610dc885828601610d23565b9250506020610dd985828601610d72565b9150509250929050565b610dec81610d51565b82525050565b6000602082019050610e076000830184610de3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e52610e4d610e4884610e0d565b610e2d565b610e0d565b9050919050565b6000610e6482610e37565b9050919050565b6000610e7682610e59565b9050919050565b610e8681610e6b565b82525050565b6000602082019050610ea16000830184610e7d565b92915050565b600080fd5b600081905082602060020282011115610ec857610ec7610ea7565b5b92915050565b600081905082604060020282011115610eea57610ee9610ea7565b5b92915050565b600081905082602060040282011115610f0c57610f0b610ea7565b5b92915050565b6000806000806000806101c08789031215610f3057610f2f610c01565b5b600087013567ffffffffffffffff811115610f4e57610f4d610c06565b5b610f5a89828a01610d23565b9650506020610f6b89828a01610eac565b9550506060610f7c89828a01610ece565b94505060e0610f8d89828a01610eac565b935050610120610f9f89828a01610ef0565b9250506101a0610fb189828a01610d72565b9150509295509295509295565b600060208284031215610fd457610fd3610c01565b5b600082013567ffffffffffffffff811115610ff257610ff1610c06565b5b610ffe84828501610d23565b91505092915050565b60008115159050919050565b61101c81611007565b82525050565b60006020820190506110376000830184611013565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107757808201518184015260208101905061105c565b60008484015250505050565b600061108e8261103d565b6110988185611048565b93506110a8818560208601611059565b6110b181610c15565b840191505092915050565b600060208201905081810360008301526110d68184611083565b905092915050565b600067ffffffffffffffff8211156110f9576110f8610c26565b5b602082029050602081019050919050565b600061111d611118846110de565b610c86565b905080838252602082019050602084028301858111156111405761113f610ea7565b5b835b8181101561118757803567ffffffffffffffff81111561116557611164610c0b565b5b8086016111728982610d23565b85526020850194505050602081019050611142565b5050509392505050565b600082601f8301126111a6576111a5610c0b565b5b81356111b684826020860161110a565b91505092915050565b600080600080608085870312156111d9576111d8610c01565b5b600085013567ffffffffffffffff8111156111f7576111f6610c06565b5b61120387828801610d23565b945050602085013567ffffffffffffffff81111561122457611223610c06565b5b61123087828801610d23565b935050604061124187828801610d72565b925050606085013567ffffffffffffffff81111561126257611261610c06565b5b61126e87828801611191565b91505092959194509250565b600081905092915050565b60006112908261103d565b61129a818561127a565b93506112aa818560208601611059565b80840191505092915050565b60006112c28284611285565b915081905092915050565b7f456c656374696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b6000611303601783611048565b915061130e826112cd565b602082019050919050565b60006020820190508181036000830152611332816112f6565b9050919050565b7f456c656374696f6e206973206e6f742061637469766500000000000000000000600082015250565b600061136f601683611048565b915061137a82611339565b602082019050919050565b6000602082019050818103600083015261139e81611362565b9050919050565b7f566f74696e6720706572696f64206973206f7665720000000000000000000000600082015250565b60006113db601583611048565b91506113e6826113a5565b602082019050919050565b6000602082019050818103600083015261140a816113ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e756c6c6966696572206861736820616c726561647920757365640000000000600082015250565b6000611476601b83611048565b915061148182611440565b602082019050919050565b600060208201905081810360008301526114a581611469565b9050919050565b7f496e76616c69642063616e64696461746520696e646578000000000000000000600082015250565b60006114e2601783611048565b91506114ed826114ac565b602082019050919050565b60006020820190508181036000830152611511816114d5565b9050919050565b82818337505050565b61152d60408383611518565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b61155d60408383611518565b5050565b600061156d8383611551565b60408301905092915050565b600082905092915050565b6000604082019050919050565b61159a81611531565b6115a4818461153c565b92506115af82611547565b8060005b838110156115e8576115c58284611579565b6115cf8782611561565b96506115da83611584565b9250506001810190506115b3565b505050505050565b6115fc60808383611518565b5050565b6000610180820190506116166000830187611521565b6116236040830186611591565b61163060c0830185611521565b61163e6101008301846115f0565b95945050505050565b61165081611007565b811461165b57600080fd5b50565b60008151905061166d81611647565b92915050565b60006020828403121561168957611688610c01565b5b60006116978482850161165e565b91505092915050565b7f496e76616c6964205a4b2070726f6f6600000000000000000000000000000000600082015250565b60006116d6601083611048565b91506116e1826116a0565b602082019050919050565b60006020820190508181036000830152611705816116c9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061174682610d51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117785761177761170c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117ca57607f821691505b6020821081036117dd576117dc611783565b5b50919050565b7f456c656374696f6e20494420616c726561647920757365640000000000000000600082015250565b6000611819601883611048565b9150611824826117e3565b602082019050919050565b600060208201905081810360008301526118488161180c565b9050919050565b7f4174206c6561737420322063616e646964617465732072657175697265640000600082015250565b6000611885601e83611048565b91506118908261184f565b602082019050919050565b600060208201905081810360008301526118b481611878565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261191d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826118e0565b61192786836118e0565b95508019841693508086168417925050509392505050565b600061195a61195561195084610d51565b610e2d565b610d51565b9050919050565b6000819050919050565b6119748361193f565b61198861198082611961565b8484546118ed565b825550505050565b600090565b61199d611990565b6119a881848461196b565b505050565b5b818110156119cc576119c1600082611995565b6001810190506119ae565b5050565b601f821115611a11576119e2816118bb565b6119eb846118d0565b810160208510156119fa578190505b611a0e611a06856118d0565b8301826119ad565b50505b505050565b600082821c905092915050565b6000611a3460001984600802611a16565b1980831691505092915050565b6000611a4d8383611a23565b9150826002028217905092915050565b611a668261103d565b67ffffffffffffffff811115611a7f57611a7e610c26565b5b611a8982546117b2565b611a948282856119d0565b600060209050601f831160018114611ac75760008415611ab5578287015190505b611abf8582611a41565b865550611b27565b601f198416611ad5866118bb565b60005b82811015611afd57848901518255600182019150602085019450602081019050611ad8565b86831015611b1a5784890151611b16601f891682611a23565b8355505b6001600288020188555050505b505050505050565b6000611b3a82610d51565b9150611b4583610d51565b9250828202611b5381610d51565b91508282048414831517611b6a57611b6961170c565b5b5092915050565b6000611b7c82610d51565b9150611b8783610d51565b9250828201905080821115611b9f57611b9e61170c565b5b92915050565b60006040820190508181036000830152611bbf8185611083565b9050611bce6020830184610de3565b9392505050565b7f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c31602283611048565b9150611c3c82611bd5565b604082019050919050565b60006020820190508181036000830152611c6081611c24565b905091905056fea2646970667358221220d66cbcf7120a86ab45a0d186b43ad2600777ff44da1e0fed33f111d7adb1ff9b64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ae179ebc11610066578063ae179ebc1461016d578063c9a350cd1461019d578063cde5c32c146101cd578063d6afb55c146101fd578063fe43bc07146102195761009e565b8063199e4411146100a35780632b7ac3f3146100d35780636225a1b6146100f157806398d16f751461010d5780639bc8e4701461013d575b600080fd5b6100bd60048036038101906100b89190610d87565b610235565b6040516100ca9190610df2565b60405180910390f35b6100db610272565b6040516100e89190610e8c565b60405180910390f35b61010b60048036038101906101069190610f12565b610296565b005b61012760048036038101906101229190610fbe565b61064b565b6040516101349190610df2565b60405180910390f35b61015760048036038101906101529190610fbe565b610676565b6040516101649190611022565b60405180910390f35b61018760048036038101906101829190610fbe565b6106c1565b6040516101949190610df2565b60405180910390f35b6101b760048036038101906101b29190610d87565b6106ec565b6040516101c491906110bc565b60405180910390f35b6101e760048036038101906101e29190610fbe565b6107b1565b6040516101f49190611022565b60405180910390f35b610217600480360381019061021291906111bf565b6107c3565b005b610233600480360381019061022e9190610fbe565b610a37565b005b600060018360405161024791906112b6565b9081526020016040518091039020600801600083815260200190815260200160002054905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b856002816040516102a791906112b6565b908152602001604051809103902060009054906101000a900460ff16610302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f990611319565b60405180910390fd5b600060018860405161031491906112b6565b908152602001604051809103902090508060030160009054906101000a900460ff16610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90611385565b60405180910390fd5b80600201544211156103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b3906113f1565b60405180910390fd5b806007016000856001600481106103d6576103d5611411565b5b602002013560001b815260200190815260200160002060009054906101000a900460ff161561043a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104319061148c565b60405180910390fd5b80600501548310610480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610477906114f8565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe8c13b898989896040518563ffffffff1660e01b81526004016104e29493929190611600565b602060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611673565b905080610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c906116ec565b60405180910390fd5b60018260070160008760016004811061058157610580611411565b5b602002013560001b815260200190815260200160002060006101000a81548160ff0219169083151502179055508160040160008154809291906105c39061173b565b919050555081600801600085815260200190815260200160002060008154809291906105ee9061173b565b91905055508860405161060191906112b6565b60405180910390207f82ea01a4479f27996bbe8de24f4c8d962035fe2f32a2b130c8c9ca593ab91aa8856040516106389190610df2565b60405180910390a2505050505050505050565b600060018260405161065d91906112b6565b9081526020016040518091039020600401549050919050565b60008060018360405161068991906112b6565b908152602001604051809103902090508060030160019054906101000a900460ff16806106b95750806002015442115b915050919050565b60006001826040516106d391906112b6565b9081526020016040518091039020600501549050919050565b60606001836040516106fe91906112b6565b90815260200160405180910390206006016000838152602001908152602001600020805461072b906117b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610757906117b2565b80156107a45780601f10610779576101008083540402835291602001916107a4565b820191906000526020600020905b81548152906001019060200180831161078757829003601f168201915b5050505050905092915050565b60006107bc82610676565b9050919050565b6002846040516107d391906112b6565b908152602001604051809103902060009054906101000a900460ff161561082f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108269061182f565b60405180910390fd5b600281511015610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061189b565b60405180910390fd5b600060018560405161088691906112b6565b90815260200160405180910390209050838160000190816108a79190611a5d565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603c836108f89190611b2f565b426109039190611b71565b816002018190555060018160030160006101000a81548160ff02191690831515021790555060008160030160016101000a81548160ff0219169083151502179055508151816005018190555060005b82518110156109a55782818151811061096e5761096d611411565b5b602002602001015182600601600083815260200190815260200160002090816109979190611a5d565b508080600101915050610952565b5060016002866040516109b891906112b6565b908152602001604051809103902060006101000a81548160ff021916908315150217905550846040516109eb91906112b6565b60405180910390207f184d51cdcac34bb27b7a2fc48df2288bc62dcad236c9e586b3b2ff0ae96489e7858360020154604051610a28929190611ba5565b60405180910390a25050505050565b80600181604051610a4891906112b6565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90611c47565b60405180910390fd5b81600281604051610af891906112b6565b908152602001604051809103902060009054906101000a900460ff16610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611319565b60405180910390fd5b6000600184604051610b6591906112b6565b9081526020016040518091039020905060008160030160006101000a81548160ff02191690831515021790555060018160030160016101000a81548160ff02191690831515021790555083604051610bbd91906112b6565b60405180910390207f2b77cefdcd8726daf4c7109ee1b2f7b6e696783da95bccd39ee47478e017d06760405160405180910390a250505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c5e82610c15565b810181811067ffffffffffffffff82111715610c7d57610c7c610c26565b5b80604052505050565b6000610c90610bf7565b9050610c9c8282610c55565b919050565b600067ffffffffffffffff821115610cbc57610cbb610c26565b5b610cc582610c15565b9050602081019050919050565b82818337600083830152505050565b6000610cf4610cef84610ca1565b610c86565b905082815260208101848484011115610d1057610d0f610c10565b5b610d1b848285610cd2565b509392505050565b600082601f830112610d3857610d37610c0b565b5b8135610d48848260208601610ce1565b91505092915050565b6000819050919050565b610d6481610d51565b8114610d6f57600080fd5b50565b600081359050610d8181610d5b565b92915050565b60008060408385031215610d9e57610d9d610c01565b5b600083013567ffffffffffffffff811115610dbc57610dbb610c06565b5b610dc885828601610d23565b9250506020610dd985828601610d72565b9150509250929050565b610dec81610d51565b82525050565b6000602082019050610e076000830184610de3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e52610e4d610e4884610e0d565b610e2d565b610e0d565b9050919050565b6000610e6482610e37565b9050919050565b6000610e7682610e59565b9050919050565b610e8681610e6b565b82525050565b6000602082019050610ea16000830184610e7d565b92915050565b600080fd5b600081905082602060020282011115610ec857610ec7610ea7565b5b92915050565b600081905082604060020282011115610eea57610ee9610ea7565b5b92915050565b600081905082602060040282011115610f0c57610f0b610ea7565b5b92915050565b6000806000806000806101c08789031215610f3057610f2f610c01565b5b600087013567ffffffffffffffff811115610f4e57610f4d610c06565b5b610f5a89828a01610d23565b9650506020610f6b89828a01610eac565b9550506060610f7c89828a01610ece565b94505060e0610f8d89828a01610eac565b935050610120610f9f89828a01610ef0565b9250506101a0610fb189828a01610d72565b9150509295509295509295565b600060208284031215610fd457610fd3610c01565b5b600082013567ffffffffffffffff811115610ff257610ff1610c06565b5b610ffe84828501610d23565b91505092915050565b60008115159050919050565b61101c81611007565b82525050565b60006020820190506110376000830184611013565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107757808201518184015260208101905061105c565b60008484015250505050565b600061108e8261103d565b6110988185611048565b93506110a8818560208601611059565b6110b181610c15565b840191505092915050565b600060208201905081810360008301526110d68184611083565b905092915050565b600067ffffffffffffffff8211156110f9576110f8610c26565b5b602082029050602081019050919050565b600061111d611118846110de565b610c86565b905080838252602082019050602084028301858111156111405761113f610ea7565b5b835b8181101561118757803567ffffffffffffffff81111561116557611164610c0b565b5b8086016111728982610d23565b85526020850194505050602081019050611142565b5050509392505050565b600082601f8301126111a6576111a5610c0b565b5b81356111b684826020860161110a565b91505092915050565b600080600080608085870312156111d9576111d8610c01565b5b600085013567ffffffffffffffff8111156111f7576111f6610c06565b5b61120387828801610d23565b945050602085013567ffffffffffffffff81111561122457611223610c06565b5b61123087828801610d23565b935050604061124187828801610d72565b925050606085013567ffffffffffffffff81111561126257611261610c06565b5b61126e87828801611191565b91505092959194509250565b600081905092915050565b60006112908261103d565b61129a818561127a565b93506112aa818560208601611059565b80840191505092915050565b60006112c28284611285565b915081905092915050565b7f456c656374696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b6000611303601783611048565b915061130e826112cd565b602082019050919050565b60006020820190508181036000830152611332816112f6565b9050919050565b7f456c656374696f6e206973206e6f742061637469766500000000000000000000600082015250565b600061136f601683611048565b915061137a82611339565b602082019050919050565b6000602082019050818103600083015261139e81611362565b9050919050565b7f566f74696e6720706572696f64206973206f7665720000000000000000000000600082015250565b60006113db601583611048565b91506113e6826113a5565b602082019050919050565b6000602082019050818103600083015261140a816113ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e756c6c6966696572206861736820616c726561647920757365640000000000600082015250565b6000611476601b83611048565b915061148182611440565b602082019050919050565b600060208201905081810360008301526114a581611469565b9050919050565b7f496e76616c69642063616e64696461746520696e646578000000000000000000600082015250565b60006114e2601783611048565b91506114ed826114ac565b602082019050919050565b60006020820190508181036000830152611511816114d5565b9050919050565b82818337505050565b61152d60408383611518565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b61155d60408383611518565b5050565b600061156d8383611551565b60408301905092915050565b600082905092915050565b6000604082019050919050565b61159a81611531565b6115a4818461153c565b92506115af82611547565b8060005b838110156115e8576115c58284611579565b6115cf8782611561565b96506115da83611584565b9250506001810190506115b3565b505050505050565b6115fc60808383611518565b5050565b6000610180820190506116166000830187611521565b6116236040830186611591565b61163060c0830185611521565b61163e6101008301846115f0565b95945050505050565b61165081611007565b811461165b57600080fd5b50565b60008151905061166d81611647565b92915050565b60006020828403121561168957611688610c01565b5b60006116978482850161165e565b91505092915050565b7f496e76616c6964205a4b2070726f6f6600000000000000000000000000000000600082015250565b60006116d6601083611048565b91506116e1826116a0565b602082019050919050565b60006020820190508181036000830152611705816116c9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061174682610d51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117785761177761170c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117ca57607f821691505b6020821081036117dd576117dc611783565b5b50919050565b7f456c656374696f6e20494420616c726561647920757365640000000000000000600082015250565b6000611819601883611048565b9150611824826117e3565b602082019050919050565b600060208201905081810360008301526118488161180c565b9050919050565b7f4174206c6561737420322063616e646964617465732072657175697265640000600082015250565b6000611885601e83611048565b91506118908261184f565b602082019050919050565b600060208201905081810360008301526118b481611878565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261191d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826118e0565b61192786836118e0565b95508019841693508086168417925050509392505050565b600061195a61195561195084610d51565b610e2d565b610d51565b9050919050565b6000819050919050565b6119748361193f565b61198861198082611961565b8484546118ed565b825550505050565b600090565b61199d611990565b6119a881848461196b565b505050565b5b818110156119cc576119c1600082611995565b6001810190506119ae565b5050565b601f821115611a11576119e2816118bb565b6119eb846118d0565b810160208510156119fa578190505b611a0e611a06856118d0565b8301826119ad565b50505b505050565b600082821c905092915050565b6000611a3460001984600802611a16565b1980831691505092915050565b6000611a4d8383611a23565b9150826002028217905092915050565b611a668261103d565b67ffffffffffffffff811115611a7f57611a7e610c26565b5b611a8982546117b2565b611a948282856119d0565b600060209050601f831160018114611ac75760008415611ab5578287015190505b611abf8582611a41565b865550611b27565b601f198416611ad5866118bb565b60005b82811015611afd57848901518255600182019150602085019450602081019050611ad8565b86831015611b1a5784890151611b16601f891682611a23565b8355505b6001600288020188555050505b505050505050565b6000611b3a82610d51565b9150611b4583610d51565b9250828202611b5381610d51565b91508282048414831517611b6a57611b6961170c565b5b5092915050565b6000611b7c82610d51565b9150611b8783610d51565b9250828201905080821115611b9f57611b9e61170c565b5b92915050565b60006040820190508181036000830152611bbf8185611083565b9050611bce6020830184610de3565b9392505050565b7f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c31602283611048565b9150611c3c82611bd5565b604082019050919050565b60006020820190508181036000830152611c6081611c24565b905091905056fea2646970667358221220d66cbcf7120a86ab45a0d186b43ad2600777ff44da1e0fed33f111d7adb1ff9b64736f6c63430008180033",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

  ]; // Your ZkpVoting contract ABI

// --- Global Variables ---
let provider;
let signer;
let zkpVotingContract;
let currentAccount = null;
let knownElectionIds = new Set(); // ट्रैक रखने के लिए कौन सी इलेक्शन ID ज्ञात हैं

// --- DOM Elements ---
const connectWalletBtn = document.getElementById('connectWalletBtn');
const walletAddressDisplay = document.getElementById('walletAddressDisplay');
const createElectionForm = document.getElementById('createElectionForm');
const createElectionStatus = document.getElementById('createElectionStatus');
const generatedElectionIdDisplay = document.getElementById('generatedElectionIdDisplay'); // नया एलिमेंट
const voteForm = document.getElementById('voteForm');
const voteStatus = document.getElementById('voteStatus');
const selectElectionVote = document.getElementById('selectElectionVote');
const candidatesList = document.getElementById('candidatesList');
const selectElectionManage = document.getElementById('selectElectionManage');
const electionDetails = document.getElementById('electionDetails');
const endElectionBtn = document.getElementById('endElectionBtn');
const showResultsBtn = document.getElementById('showResultsBtn');
const manageElectionStatus = document.getElementById('manageElectionStatus');
const resultsDisplay = document.getElementById('resultsDisplay');

// --- Helper Functions ---
function displayStatus(element, message, type) {
    element.textContent = message;
    element.className = `status-message ${type}`;
}

function clearStatus(element) {
    element.textContent = '';
    element.className = 'status-message';
}

function parseArrayInput(inputString, type = 'uint') {
    try {
        let arr = JSON.parse(inputString);
        if (!Array.isArray(arr)) throw new Error('Not an array');
        // Basic type validation for uint. More robust validation might be needed.
        if (type === 'uint' || type === 'uint[2]' || type === 'uint[4]') {
            arr = arr.map(Number);
            if (arr.some(isNaN)) throw new Error('Contains non-numeric values');
        } else if (type === 'uint[2][2]') {
            if (!arr.every(subArr => Array.isArray(subArr) && subArr.every(val => !isNaN(Number(val))))) {
                throw new Error('Invalid nested array format');
            }
            arr = arr.map(subArr => subArr.map(Number));
        }
        return arr;
    } catch (e) {
        throw new Error(`Invalid array format for ${type}: ${e.message}`);
    }
}

// Function to generate a unique ID with "uni-vote" prefix
function generateUniVoteElectionId() {
    // Current timestamp in milliseconds as a unique identifier
    const newId = `uni-vote-${Date.now()}`;
    generatedElectionIdDisplay.textContent = `Generated ID: ${newId}`; // UI में ID दिखाएँ
    return newId;
}


// --- Core Functions ---

// Connect to MetaMask
async function connectWallet() {
    if (typeof window.ethereum !== 'undefined') {
        try {
            provider = new ethers.providers.Web3Provider(window.ethereum);
            await provider.send("eth_requestAccounts", []);
            signer = provider.getSigner();
            currentAccount = await signer.getAddress();
            walletAddressDisplay.textContent = `Connected: ${currentAccount.substring(0, 6)}...${currentAccount.substring(currentAccount.length - 4)}`;
            zkpVotingContract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
            console.log("MetaMask Connected. Contract instance created.");

            // Load elections and generate initial ID
            await loadElectionsFromEvents(); // मौजूदा इलेक्शन्स लोड करें
            generateUniVoteElectionId(); // नई इलेक्शन ID जनरेट करें

            // Listen for account changes
            window.ethereum.on('accountsChanged', (accounts) => {
                if (accounts.length === 0) {
                    console.log('Please connect to MetaMask.');
                    walletAddressDisplay.textContent = 'Not connected';
                    currentAccount = null;
                    zkpVotingContract = null;
                    knownElectionIds.clear(); // क्लियर करें
                    loadElectionsToSelect(); // ड्रॉपडाउन खाली करें
                } else {
                    currentAccount = accounts[0];
                    walletAddressDisplay.textContent = `Connected: ${currentAccount.substring(0, 6)}...${currentAccount.substring(currentAccount.length - 4)}`;
                    signer = provider.getSigner(); // Update signer
                    zkpVotingContract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer); // Update contract instance
                    loadElectionsFromEvents(); // नए अकाउंट के लिए इलेक्शन्स फिर से लोड करें
                }
            });

            // Listen for chain changes
            window.ethereum.on('chainChanged', (_chainId) => {
                window.location.reload(); // पेज को रीलोड करें
            });

        } catch (error) {
            console.error("Error connecting to MetaMask:", error);
            walletAddressDisplay.textContent = "Connection failed!";
        }
    } else {
        alert('MetaMask is not installed. Please install it to use this DApp: https://metamask.io/download/');
    }
}

// Load existing elections by fetching past events
async function loadElectionsFromEvents() {
    if (!zkpVotingContract || !provider) return;

    knownElectionIds.clear(); // ज्ञात IDs को क्लियर करें
    selectElectionVote.innerHTML = '<option value="">-- Select Election --</option>';
    selectElectionManage.innerHTML = '<option value="">-- Select Election --</option>';

    try {
        // Contract के `ElectionCreated` इवेंट को क्वेरी करें
        const filter = zkpVotingContract.filters.ElectionCreated();
        const events = await zkpVotingContract.queryFilter(filter, 0); // ब्लॉक 0 से वर्तमान तक

        events.forEach(event => {
            const electionId = event.args.electionId;
            const electionName = event.args.name;
            if (!knownElectionIds.has(electionId)) {
                knownElectionIds.add(electionId);

                const option1 = document.createElement('option');
                option1.value = electionId;
                option1.textContent = electionName;
                selectElectionVote.appendChild(option1);

                const option2 = document.createElement('option');
                option2.value = electionId;
                option2.textContent = electionName;
                selectElectionManage.appendChild(option2);
            }
        });
        console.log(`Loaded ${knownElectionIds.size} existing elections.`);

    } catch (error) {
        console.error("Error loading past ElectionCreated events:", error);
    }
}


// Create Election Function
createElectionForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (!zkpVotingContract) {
        displayStatus(createElectionStatus, "Please connect your wallet first.", "error");
        return;
    }

    clearStatus(createElectionStatus);

    // Election ID को स्वचालित रूप से जनरेट करें
    const electionId = generateUniVoteElectionId(); 

    const electionName = document.getElementById('electionName').value;
    const duration = parseInt(document.getElementById('duration').value);
    const candidateNamesInput = document.getElementById('candidateNames').value;
    const candidateNames = candidateNamesInput.split(',').map(name => name.trim()).filter(name => name !== '');

    if (candidateNames.length < 2) {
        displayStatus(createElectionStatus, "Please enter at least 2 candidates.", "error");
        return;
    }

    try {
        displayStatus(createElectionStatus, `Creating election with ID "${electionId}"... Please confirm in MetaMask.`, "hint");
        const tx = await zkpVotingContract.createElection(electionId, electionName, duration, candidateNames);
        await tx.wait(); // Wait for the transaction to be mined
        displayStatus(createElectionStatus, `Election "${electionName}" created successfully! ID: ${electionId}, Tx Hash: ${tx.hash}`, "success");
        createElectionForm.reset();
        generateUniVoteElectionId(); // नई इलेक्शन के लिए नई ID जनरेट करें

        // Add newly created election to the select dropdowns (via event listener or manually)
        // Manual addition here to ensure immediate update, even before event listener processes
        if (!knownElectionIds.has(electionId)) {
            knownElectionIds.add(electionId);
            const option1 = document.createElement('option');
            option1.value = electionId;
            option1.textContent = electionName;
            selectElectionVote.appendChild(option1);

            const option2 = document.createElement('option');
            option2.value = electionId;
            option2.textContent = electionName;
            selectElectionManage.appendChild(option2);
        }

    } catch (error) {
        console.error("Error creating election:", error);
        displayStatus(createElectionStatus, `Error creating election: ${error.message || error.code || error}`, "error");
    }
});

// Vote with ZK Proof Function
voteForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (!zkpVotingContract) {
        displayStatus(voteStatus, "Please connect your wallet first.", "error");
        return;
    }

    clearStatus(voteStatus);

    const electionId = selectElectionVote.value;
    const proofA = document.getElementById('proofA').value;
    const proofB = document.getElementById('proofB').value;
    const proofC = document.getElementById('proofC').value;
    const publicInput = document.getElementById('publicInput').value;
    const candidateIndex = parseInt(document.getElementById('selectedCandidateIndex').value);

    if (!electionId) {
        displayStatus(voteStatus, "Please select an election.", "error");
        return;
    }

    try {
        // Parse string inputs to array types expected by Solidity
        const a = parseArrayInput(proofA, 'uint[2]');
        const b = parseArrayInput(proofB, 'uint[2][2]');
        const c = parseArrayInput(proofC, 'uint[2]');
        const input = parseArrayInput(publicInput, 'uint[4]');

        displayStatus(voteStatus, "Casting vote... Please confirm in MetaMask.", "hint");
        const tx = await zkpVotingContract.voteWithZKProof(electionId, a, b, c, input, candidateIndex);
        await tx.wait();
        displayStatus(voteStatus, `Vote cast successfully for election ID: ${electionId}! Tx Hash: ${tx.hash}`, "success");
        voteForm.reset();
    } catch (error) {
        console.error("Error casting vote:", error);
        displayStatus(voteStatus, `Error casting vote: ${error.message || error.code || error}`, "error");
    }
});

// Display Election Details & Candidates for Voting Section
selectElectionVote.addEventListener('change', async () => {
    const electionId = selectElectionVote.value;
    candidatesList.innerHTML = ''; // Clear previous candidates

    if (!electionId || !zkpVotingContract) {
        return;
    }

    try {
        const candidateCount = await zkpVotingContract.getCandidateCount(electionId);
        if (candidateCount > 0) {
            const ul = document.createElement('ul');
            candidatesList.appendChild(document.createElement('h3')).textContent = 'Candidates:';
            for (let i = 0; i < candidateCount; i++) {
                const candidateName = await zkpVotingContract.getCandidateName(electionId, i);
                const li = document.createElement('li');
                li.textContent = `${i}: ${candidateName}`;
                ul.appendChild(li);
            }
            candidatesList.appendChild(ul);
        } else {
            candidatesList.textContent = 'No candidates found for this election.';
        }
    } catch (error) {
        console.error("Error fetching candidates:", error);
        candidatesList.textContent = `Error fetching candidates: ${error.message}`;
    }
});


// Display Election Details for Management/Results Section
selectElectionManage.addEventListener('change', async () => {
    const electionId = selectElectionManage.value;
    electionDetails.innerHTML = ''; // Clear previous details
    resultsDisplay.innerHTML = ''; // Clear previous results

    if (!electionId || !zkpVotingContract) {
        return;
    }

    try {
        // चूंकि आपके कॉन्ट्रैक्ट में `Election` स्ट्रक्चर के लिए सीधा पब्लिक गेटर नहीं है,
        // हमें अलग-अलग गेटर फ़ंक्शंस को कॉल करना होगा।
        // `elections(electionId)` सीधे कॉल करने पर केवल पहला मैप्ड वैल्यू (admin) मिलेगी।
        
        // Fetch Admin address separately
        const electionAdmin = await zkpVotingContract.elections(electionId); // This gives the admin address
        const adminAddress = electionAdmin.admin; // Access the admin field

        const totalVotes = await zkpVotingContract.getTotalVotes(electionId);
        const candidateCount = await zkpVotingContract.getCandidateCount(electionId);
        const isEnded = await zkpVotingContract.isElectionEnded(electionId); // Checks both admin ended and time ended

        let detailsHtml = `
            <h3>Election Details:</h3>
            <p><strong>Election ID:</strong> ${electionId}</p>
            <p><strong>Admin:</strong> ${adminAddress}</p>
            <p><strong>Total Votes Cast:</strong> ${totalVotes}</p>
            <p><strong>Number of Candidates:</strong> ${candidateCount}</p>
            <p><strong>Election Ended:</strong> ${isEnded ? 'Yes' : 'No'}</p>
        `;
        electionDetails.innerHTML = detailsHtml;

        // Enable/Disable endElectionBtn based on admin and election status
        if (currentAccount && adminAddress && currentAccount.toLowerCase() === adminAddress.toLowerCase() && !isEnded) {
            endElectionBtn.disabled = false;
        } else {
            endElectionBtn.disabled = true;
        }

    } catch (error) {
        console.error("Error fetching election details:", error);
        electionDetails.textContent = `Error fetching election details: ${error.message}`;
    }
});


// End Election Function
endElectionBtn.addEventListener('click', async () => {
    const electionId = selectElectionManage.value;
    if (!electionId) {
        displayStatus(manageElectionStatus, "Please select an election to end.", "error");
        return;
    }
    if (!zkpVotingContract) {
        displayStatus(manageElectionStatus, "Please connect your wallet first.", "error");
        return;
    }

    clearStatus(manageElectionStatus);

    try {
        displayStatus(manageElectionStatus, "Ending election... Please confirm in MetaMask.", "hint");
        const tx = await zkpVotingContract.endElection(electionId);
        await tx.wait();
        displayStatus(manageElectionStatus, `Election "${electionId}" ended successfully! Tx Hash: ${tx.hash}`, "success");
        // Reload details to update status
        await selectElectionManage.dispatchEvent(new Event('change'));

    } catch (error) {
        console.error("Error ending election:", error);
        displayStatus(manageElectionStatus, `Error ending election: ${error.message || error.code || error}`, "error");
    }
});

// Show Results Function
showResultsBtn.addEventListener('click', async () => {
    const electionId = selectElectionManage.value;
    resultsDisplay.innerHTML = ''; // Clear previous results

    if (!electionId) {
        displayStatus(manageElectionStatus, "Please select an election to show results for.", "error");
        return;
    }
    if (!zkpVotingContract) {
        displayStatus(manageElectionStatus, "Please connect your wallet first.", "error");
        return;
    }

    clearStatus(manageElectionStatus);

    try {
        const canShowResults = await zkpVotingContract.showResult(electionId);

        if (canShowResults) {
            displayStatus(manageElectionStatus, "Fetching results...", "hint");
            const totalVotes = await zkpVotingContract.getTotalVotes(electionId);
            const candidateCount = await zkpVotingContract.getCandidateCount(electionId);

            let resultsHtml = `<h3>Election Results for "${electionId}"</h3>`;
            resultsHtml += `<p>Total Votes Cast: ${totalVotes}</p>`;
            resultsHtml += `<ul>`;

            for (let i = 0; i < candidateCount; i++) {
                const candidateName = await zkpVotingContract.getCandidateName(electionId, i);
                const votes = await zkpVotingContract.getVotesForCandidate(electionId, i);
                resultsHtml += `<li>${candidateName}: <span>${votes} votes</span></li>`;
            }
            resultsHtml += `</ul>`;
            resultsDisplay.innerHTML = resultsHtml;
            clearStatus(manageElectionStatus); // Clear hint
        } else {
            displayStatus(manageElectionStatus, "Results are not available yet. The election must be officially ended or its time duration must have passed.", "error");
        }
    } catch (error) {
        console.error("Error showing results:", error);
        displayStatus(manageElectionStatus, `Error showing results: ${error.message || error.code || error}`, "error");
    }
});

// --- Event Listeners ---
connectWalletBtn.addEventListener('click', connectWallet);

// Initial load: Try to connect if MetaMask is already authorized and generate initial ID
window.addEventListener('load', () => {
    if (typeof window.ethereum !== 'undefined' && window.ethereum.selectedAddress) {
        connectWallet();
    } else {
        generateUniVoteElectionId(); // अगर MetaMask कनेक्ट नहीं है तो भी ID जनरेट करें
    }
});

// Listen to contract events for real-time updates
if (zkpVotingContract) { // यह ब्लॉक तब ही चलेगा जब zkpVotingContract ऑब्जेक्ट बन जाएगा
    zkpVotingContract.on("ElectionCreated", (electionId, name, endTime, event) => {
        console.log(`Event: ElectionCreated - ID: ${electionId}, Name: ${name}, End Time: ${endTime}`);
        // ऑटोमैटिकली ड्रॉपडाउन में जोड़ें
        if (!knownElectionIds.has(electionId)) {
            knownElectionIds.add(electionId);
            const option1 = document.createElement('option');
            option1.value = electionId;
            option1.textContent = name;
            selectElectionVote.appendChild(option1);

            const option2 = document.createElement('option');
            option2.value = electionId;
            option2.textContent = name;
            selectElectionManage.appendChild(option2);
        }
    });

    zkpVotingContract.on("Voted", (electionId, candidateIndex, event) => {
        console.log(`Event: Voted - Election ID: ${electionId}, Candidate Index: ${candidateIndex}`);
        // यदि वर्तमान में उस चुनाव को देख रहे हैं तो वोट काउंट को रीफ्रेश करें
        if (selectElectionManage.value === electionId && resultsDisplay.innerHTML !== '') {
            showResultsBtn.click(); // परिणामों को फिर से प्राप्त करें और प्रदर्शित करें
        }
    });

    zkpVotingContract.on("ElectionEnded", (electionId, event) => {
        console.log(`Event: ElectionEnded - Election ID: ${electionId}`);
        // यदि चुनाव वर्तमान में चयनित है तो स्थिति को अपडेट करें
        if (selectElectionManage.value === electionId) {
            selectElectionManage.dispatchEvent(new Event('change')); // अपडेट ट्रिगर करें
        }
    });
}