import { BACKEND_URL } from "../config.js";

document.addEventListener('DOMContentLoaded', async () => {
    // Fallback for BACKEND_URL
    if (!BACKEND_URL) {
        console.error("BACKEND_URL is not defined. Check config.js.");
        alert("Configuration error: Backend URL missing.");
        window.location.href = './index.html';
        return;
    }

    // Token verification

    try {
        const response = await fetch(`${BACKEND_URL}/api/Verify-Token`, {
            method: 'GET',
            credentials: 'include'
        });

        if (!response.ok) {
            console.warn("Token verification failed:", response.status);
            alert("Access denied. Redirecting to login...");
            window.location.href = './index.html';
            return;
        }

        // User is authenticated, reveal the page
        document.documentElement.style.visibility = 'visible';

    } catch (err) {
        console.error("Token verification error:", err);
        alert("Failed to verify access. Redirecting to login...");
        window.location.href = './index.html';
        return;
    }
});


//  <script defer>
document.addEventListener('DOMContentLoaded', () => {

    if (typeof ethers === 'undefined') {
        alert('CRITICAL ERROR: Ethers.js did not load. Please check your internet connection, disable ad-blockers, and perform a hard refresh (Ctrl+F5). The DApp cannot run without it.');
        document.querySelectorAll('button').forEach(btn => btn.disabled = true);
        document.getElementById('connectWalletBtn').textContent = 'Error: Library Missing';
        return;
    }

    const contractAddress = "0x4658F8678C7b06cB1667773303CE55b45F803682";
    const contractABI = [
        {
            "_format": "hh-sol-artifact-1",
            "contractName": "ZkpVoting",
            "sourceName": "contracts/ZkpVoting.sol",
            "abi": [
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "_verifier",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_registry",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "constructor"
                },
                {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": true,
                            "internalType": "string",
                            "name": "electionId",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "uint256",
                            "name": "endTime",
                            "type": "uint256"
                        }
                    ],
                    "name": "ElectionCreated",
                    "type": "event"
                },
                {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": true,
                            "internalType": "string",
                            "name": "electionId",
                            "type": "string"
                        }
                    ],
                    "name": "ElectionEnded",
                    "type": "event"
                },
                {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": true,
                            "internalType": "string",
                            "name": "electionId",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "uint256",
                            "name": "candidateIndex",
                            "type": "uint256"
                        }
                    ],
                    "name": "Voted",
                    "type": "event"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_name",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "_durationInMinutes",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string[]",
                            "name": "_candidateNames",
                            "type": "string[]"
                        }
                    ],
                    "name": "createElection",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "newElectionId",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        }
                    ],
                    "name": "endElection",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        }
                    ],
                    "name": "getCandidateCount",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        }
                    ],
                    "name": "getCandidateName",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "counter",
                            "type": "uint256"
                        }
                    ],
                    "name": "getGeneratedElectionId",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "getNextElectionCounter",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        }
                    ],
                    "name": "getTotalVotes",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        }
                    ],
                    "name": "getVotesForCandidate",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        }
                    ],
                    "name": "showResult",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "verifier",
                    "outputs": [
                        {
                            "internalType": "contract Verifier",
                            "name": "",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_electionId",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256[2]",
                            "name": "a",
                            "type": "uint256[2]"
                        },
                        {
                            "internalType": "uint256[2][2]",
                            "name": "b",
                            "type": "uint256[2][2]"
                        },
                        {
                            "internalType": "uint256[2]",
                            "name": "c",
                            "type": "uint256[2]"
                        },
                        {
                            "internalType": "uint256[4]",
                            "name": "input",
                            "type": "uint256[4]"
                        },
                        {
                            "internalType": "uint256",
                            "name": "candidateIndex",
                            "type": "uint256"
                        }
                    ],
                    "name": "voteWithZKProof",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "voterRegistry",
                    "outputs": [
                        {
                            "internalType": "contract VoterRegistry",
                            "name": "",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                }
            ],
            "bytecode": "0x60806040523480156200001157600080fd5b50604051620024d0380380620024d083398181016040528101906200003791906200012a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b60008060408385031215620001445762000143620000c0565b5b6000620001548582860162000113565b9250506020620001678582860162000113565b9150509250929050565b61234f80620001816000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063bb523bf211610071578063bb523bf2146101b3578063be60040e146101d1578063c3aff11c146101ef578063c9a350cd1461021f578063cde5c32c1461024f578063fe43bc071461027f576100b4565b8063199e4411146100b95780632b7ac3f3146100e95780636225a1b614610107578063778606341461012357806398d16f7514610153578063ae179ebc14610183575b600080fd5b6100d360048036038101906100ce9190611257565b61029b565b6040516100e091906112c2565b60405180910390f35b6100f16102d8565b6040516100fe919061135c565b60405180910390f35b610121600480360381019061011c91906113e2565b6102fc565b005b61013d6004803603810190610138919061148e565b610798565b60405161014a919061153a565b60405180910390f35b61016d6004803603810190610168919061155c565b61083d565b60405161017a91906112c2565b60405180910390f35b61019d6004803603810190610198919061155c565b610868565b6040516101aa91906112c2565b60405180910390f35b6101bb610893565b6040516101c891906112c2565b60405180910390f35b6101d961089d565b6040516101e691906115c6565b60405180910390f35b610209600480360381019061020491906116c2565b6108c3565b604051610216919061153a565b60405180910390f35b61023960048036038101906102349190611257565b610b84565b604051610246919061153a565b60405180910390f35b6102696004803603810190610264919061155c565b610c49565b6040516102769190611768565b60405180910390f35b6102996004803603810190610294919061155c565b610c94565b005b60006003836040516102ad91906117bf565b9081526020016040518091039020600801600083815260200190815260200160002054905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8560048160405161030d91906117bf565b908152602001604051809103902060009054906101000a900460ff16610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90611822565b60405180910390fd5b600060038860405161037a91906117bf565b908152602001604051809103902090508060030160009054906101000a900460ff166103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d29061188e565b60405180910390fd5b8060020154421115610422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610419906118fa565b60405180910390fd5b6000846000600481106104385761043761191a565b5b602002013560001b905081600701600082815260200190815260200160002060009054906101000a900460ff16156104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906119bb565b60405180910390fd5b6000856003600481106104bb576104ba61191a565b5b602002013560001b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327258b22826040518263ffffffff1660e01b815260040161052091906119f4565b602060405180830381865afa15801561053d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105619190611a3b565b6105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790611ab4565b60405180910390fd5b826005015485106105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90611b20565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe8c13b8b8b8b8b6040518563ffffffff1660e01b81526004016106489493929190611c28565b602060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190611a3b565b9050806106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c290611cbb565b60405180910390fd5b600184600701600085815260200190815260200160002060006101000a81548160ff02191690831515021790555083600401600081548092919061070e90611d0a565b9190505550836008016000878152602001908152602001600020600081548092919061073990611d0a565b91905055508a60405161074c91906117bf565b60405180910390207f82ea01a4479f27996bbe8de24f4c8d962035fe2f32a2b130c8c9ca593ab91aa88760405161078391906112c2565b60405180910390a25050505050505050505050565b60606005600083815260200190815260200160002080546107b890611d81565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490611d81565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b50505050509050919050565b600060038260405161084f91906117bf565b9081526020016040518091039020600401549050919050565b600060038260405161087a91906117bf565b9081526020016040518091039020600501549050919050565b6000600254905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060028251101561090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190611dfe565b60405180910390fd5b6002600081548092919061091d90611d0a565b919050555061092d600254610ea6565b60405160200161093d9190611e6a565b604051602081830303815290604052905060048160405161095e91906117bf565b908152602001604051809103902060009054906101000a900460ff16156109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190611ed8565b60405180910390fd5b60006003826040516109cc91906117bf565b90815260200160405180910390209050848160000190816109ed919061209a565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603c84610a3e919061216c565b42610a4991906121ae565b816002018190555060018160030160006101000a81548160ff0219169083151502179055508251816005018190555060005b8351811015610ace57838181518110610a9757610a9661191a565b5b60200260200101518260060160008381526020019081526020016000209081610ac0919061209a565b508080600101915050610a7b565b506001600483604051610ae191906117bf565b908152602001604051809103902060006101000a81548160ff021916908315150217905550816005600060025481526020019081526020016000209081610b28919061209a565b5081604051610b3791906117bf565b60405180910390207f184d51cdcac34bb27b7a2fc48df2288bc62dcad236c9e586b3b2ff0ae96489e7868360020154604051610b749291906121e2565b60405180910390a2509392505050565b6060600383604051610b9691906117bf565b908152602001604051809103902060060160008381526020019081526020016000208054610bc390611d81565b80601f0160208091040260200160405190810160405280929190818152602001828054610bef90611d81565b8015610c3c5780601f10610c1157610100808354040283529160200191610c3c565b820191906000526020600020905b815481529060010190602001808311610c1f57829003601f168201915b5050505050905092915050565b600080600383604051610c5c91906117bf565b908152602001604051809103902090508060030160019054906101000a900460ff1680610c8c5750806002015442115b915050919050565b80600381604051610ca591906117bf565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b9061225e565b60405180910390fd5b81600481604051610d5591906117bf565b908152602001604051809103902060009054906101000a900460ff16610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da790611822565b60405180910390fd5b6000600384604051610dc291906117bf565b908152602001604051809103902090508060030160019054906101000a900460ff1615610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b906122ca565b60405180910390fd5b60008160030160006101000a81548160ff02191690831515021790555060018160030160016101000a81548160ff02191690831515021790555083604051610e6c91906117bf565b60405180910390207f2b77cefdcd8726daf4c7109ee1b2f7b6e696783da95bccd39ee47478e017d06760405160405180910390a250505050565b606060006001610eb584610f74565b01905060008167ffffffffffffffff811115610ed457610ed36110f6565b5b6040519080825280601f01601f191660200182016040528015610f065781602001600182028036833780820191505090505b509050600082602001820190505b600115610f69578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610f5d57610f5c6122ea565b5b04945060008503610f14575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610fd2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610fc857610fc76122ea565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061100f576d04ee2d6d415b85acef81000000008381611005576110046122ea565b5b0492506020810190505b662386f26fc10000831061103e57662386f26fc100008381611034576110336122ea565b5b0492506010810190505b6305f5e1008310611067576305f5e100838161105d5761105c6122ea565b5b0492506008810190505b612710831061108c576127108381611082576110816122ea565b5b0492506004810190505b606483106110af57606483816110a5576110a46122ea565b5b0492506002810190505b600a83106110be576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61112e826110e5565b810181811067ffffffffffffffff8211171561114d5761114c6110f6565b5b80604052505050565b60006111606110c7565b905061116c8282611125565b919050565b600067ffffffffffffffff82111561118c5761118b6110f6565b5b611195826110e5565b9050602081019050919050565b82818337600083830152505050565b60006111c46111bf84611171565b611156565b9050828152602081018484840111156111e0576111df6110e0565b5b6111eb8482856111a2565b509392505050565b600082601f830112611208576112076110db565b5b81356112188482602086016111b1565b91505092915050565b6000819050919050565b61123481611221565b811461123f57600080fd5b50565b6000813590506112518161122b565b92915050565b6000806040838503121561126e5761126d6110d1565b5b600083013567ffffffffffffffff81111561128c5761128b6110d6565b5b611298858286016111f3565b92505060206112a985828601611242565b9150509250929050565b6112bc81611221565b82525050565b60006020820190506112d760008301846112b3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061132261131d611318846112dd565b6112fd565b6112dd565b9050919050565b600061133482611307565b9050919050565b600061134682611329565b9050919050565b6113568161133b565b82525050565b6000602082019050611371600083018461134d565b92915050565b600080fd5b60008190508260206002028201111561139857611397611377565b5b92915050565b6000819050826040600202820111156113ba576113b9611377565b5b92915050565b6000819050826020600402820111156113dc576113db611377565b5b92915050565b6000806000806000806101c08789031215611400576113ff6110d1565b5b600087013567ffffffffffffffff81111561141e5761141d6110d6565b5b61142a89828a016111f3565b965050602061143b89828a0161137c565b955050606061144c89828a0161139e565b94505060e061145d89828a0161137c565b93505061012061146f89828a016113c0565b9250506101a061148189828a01611242565b9150509295509295509295565b6000602082840312156114a4576114a36110d1565b5b60006114b284828501611242565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114f55780820151818401526020810190506114da565b60008484015250505050565b600061150c826114bb565b61151681856114c6565b93506115268185602086016114d7565b61152f816110e5565b840191505092915050565b600060208201905081810360008301526115548184611501565b905092915050565b600060208284031215611572576115716110d1565b5b600082013567ffffffffffffffff8111156115905761158f6110d6565b5b61159c848285016111f3565b91505092915050565b60006115b082611329565b9050919050565b6115c0816115a5565b82525050565b60006020820190506115db60008301846115b7565b92915050565b600067ffffffffffffffff8211156115fc576115fb6110f6565b5b602082029050602081019050919050565b600061162061161b846115e1565b611156565b9050808382526020820190506020840283018581111561164357611642611377565b5b835b8181101561168a57803567ffffffffffffffff811115611668576116676110db565b5b80860161167589826111f3565b85526020850194505050602081019050611645565b5050509392505050565b600082601f8301126116a9576116a86110db565b5b81356116b984826020860161160d565b91505092915050565b6000806000606084860312156116db576116da6110d1565b5b600084013567ffffffffffffffff8111156116f9576116f86110d6565b5b611705868287016111f3565b935050602061171686828701611242565b925050604084013567ffffffffffffffff811115611737576117366110d6565b5b61174386828701611694565b9150509250925092565b60008115159050919050565b6117628161174d565b82525050565b600060208201905061177d6000830184611759565b92915050565b600081905092915050565b6000611799826114bb565b6117a38185611783565b93506117b38185602086016114d7565b80840191505092915050565b60006117cb828461178e565b915081905092915050565b7f456c656374696f6e20646f65736e277420657869737400000000000000000000600082015250565b600061180c6016836114c6565b9150611817826117d6565b602082019050919050565b6000602082019050818103600083015261183b816117ff565b9050919050565b7f456c656374696f6e206e6f742061637469766500000000000000000000000000600082015250565b60006118786013836114c6565b915061188382611842565b602082019050919050565b600060208201905081810360008301526118a78161186b565b9050919050565b7f566f74696e6720636c6f73656400000000000000000000000000000000000000600082015250565b60006118e4600d836114c6565b91506118ef826118ae565b602082019050919050565b60006020820190508181036000830152611913816118d7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f446f75626c6520766f74653a20546869732070726f6f662068617320616c726560008201527f616479206265656e207573656400000000000000000000000000000000000000602082015250565b60006119a5602d836114c6565b91506119b082611949565b604082019050919050565b600060208201905081810360008301526119d481611998565b9050919050565b6000819050919050565b6119ee816119db565b82525050565b6000602082019050611a0960008301846119e5565b92915050565b611a188161174d565b8114611a2357600080fd5b50565b600081519050611a3581611a0f565b92915050565b600060208284031215611a5157611a506110d1565b5b6000611a5f84828501611a26565b91505092915050565b7f566f74657220636f6d6d69746d656e74206e6f74207265676973746572656400600082015250565b6000611a9e601f836114c6565b9150611aa982611a68565b602082019050919050565b60006020820190508181036000830152611acd81611a91565b9050919050565b7f496e76616c69642063616e646964617465000000000000000000000000000000600082015250565b6000611b0a6011836114c6565b9150611b1582611ad4565b602082019050919050565b60006020820190508181036000830152611b3981611afd565b9050919050565b82818337505050565b611b5560408383611b40565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b611b8560408383611b40565b5050565b6000611b958383611b79565b60408301905092915050565b600082905092915050565b6000604082019050919050565b611bc281611b59565b611bcc8184611b64565b9250611bd782611b6f565b8060005b83811015611c1057611bed8284611ba1565b611bf78782611b89565b9650611c0283611bac565b925050600181019050611bdb565b505050505050565b611c2460808383611b40565b5050565b600061018082019050611c3e6000830187611b49565b611c4b6040830186611bb9565b611c5860c0830185611b49565b611c66610100830184611c18565b95945050505050565b7f496e76616c6964205a4b2070726f6f6600000000000000000000000000000000600082015250565b6000611ca56010836114c6565b9150611cb082611c6f565b602082019050919050565b60006020820190508181036000830152611cd481611c98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d1582611221565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d4757611d46611cdb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d9957607f821691505b602082108103611dac57611dab611d52565b5b50919050565b7f4e656564206d696e20322063616e646964617465730000000000000000000000600082015250565b6000611de86015836114c6565b9150611df382611db2565b602082019050919050565b60006020820190508181036000830152611e1781611ddb565b9050919050565b7f756e692d766f74652d0000000000000000000000000000000000000000000000600082015250565b6000611e54600983611783565b9150611e5f82611e1e565b600982019050919050565b6000611e7582611e47565b9150611e81828461178e565b915081905092915050565b7f496e7465726e616c206475706c6963617465204944206572726f720000000000600082015250565b6000611ec2601b836114c6565b9150611ecd82611e8c565b602082019050919050565b60006020820190508181036000830152611ef181611eb5565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f5a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f1d565b611f648683611f1d565b95508019841693508086168417925050509392505050565b6000611f97611f92611f8d84611221565b6112fd565b611221565b9050919050565b6000819050919050565b611fb183611f7c565b611fc5611fbd82611f9e565b848454611f2a565b825550505050565b600090565b611fda611fcd565b611fe5818484611fa8565b505050565b5b8181101561200957611ffe600082611fd2565b600181019050611feb565b5050565b601f82111561204e5761201f81611ef8565b61202884611f0d565b81016020851015612037578190505b61204b61204385611f0d565b830182611fea565b50505b505050565b600082821c905092915050565b600061207160001984600802612053565b1980831691505092915050565b600061208a8383612060565b9150826002028217905092915050565b6120a3826114bb565b67ffffffffffffffff8111156120bc576120bb6110f6565b5b6120c68254611d81565b6120d182828561200d565b600060209050601f83116001811461210457600084156120f2578287015190505b6120fc858261207e565b865550612164565b601f19841661211286611ef8565b60005b8281101561213a57848901518255600182019150602085019450602081019050612115565b868310156121575784890151612153601f891682612060565b8355505b6001600288020188555050505b505050505050565b600061217782611221565b915061218283611221565b925082820261219081611221565b915082820484148315176121a7576121a6611cdb565b5b5092915050565b60006121b982611221565b91506121c483611221565b92508282019050808211156121dc576121db611cdb565b5b92915050565b600060408201905081810360008301526121fc8185611501565b905061220b60208301846112b3565b9392505050565b7f4f6e6c792061646d696e00000000000000000000000000000000000000000000600082015250565b6000612248600a836114c6565b915061225382612212565b602082019050919050565b600060208201905081810360008301526122778161223b565b9050919050565b7f416c726561647920656e64656400000000000000000000000000000000000000600082015250565b60006122b4600d836114c6565b91506122bf8261227e565b602082019050919050565b600060208201905081810360008301526122e3816122a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212203c1f38ab27f5abcb5c0a32bb57bbbcb8c9b35339d8dd64fb90ea2fa22ad8050064736f6c63430008180033",
            "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063bb523bf211610071578063bb523bf2146101b3578063be60040e146101d1578063c3aff11c146101ef578063c9a350cd1461021f578063cde5c32c1461024f578063fe43bc071461027f576100b4565b8063199e4411146100b95780632b7ac3f3146100e95780636225a1b614610107578063778606341461012357806398d16f7514610153578063ae179ebc14610183575b600080fd5b6100d360048036038101906100ce9190611257565b61029b565b6040516100e091906112c2565b60405180910390f35b6100f16102d8565b6040516100fe919061135c565b60405180910390f35b610121600480360381019061011c91906113e2565b6102fc565b005b61013d6004803603810190610138919061148e565b610798565b60405161014a919061153a565b60405180910390f35b61016d6004803603810190610168919061155c565b61083d565b60405161017a91906112c2565b60405180910390f35b61019d6004803603810190610198919061155c565b610868565b6040516101aa91906112c2565b60405180910390f35b6101bb610893565b6040516101c891906112c2565b60405180910390f35b6101d961089d565b6040516101e691906115c6565b60405180910390f35b610209600480360381019061020491906116c2565b6108c3565b604051610216919061153a565b60405180910390f35b61023960048036038101906102349190611257565b610b84565b604051610246919061153a565b60405180910390f35b6102696004803603810190610264919061155c565b610c49565b6040516102769190611768565b60405180910390f35b6102996004803603810190610294919061155c565b610c94565b005b60006003836040516102ad91906117bf565b9081526020016040518091039020600801600083815260200190815260200160002054905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8560048160405161030d91906117bf565b908152602001604051809103902060009054906101000a900460ff16610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90611822565b60405180910390fd5b600060038860405161037a91906117bf565b908152602001604051809103902090508060030160009054906101000a900460ff166103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d29061188e565b60405180910390fd5b8060020154421115610422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610419906118fa565b60405180910390fd5b6000846000600481106104385761043761191a565b5b602002013560001b905081600701600082815260200190815260200160002060009054906101000a900460ff16156104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906119bb565b60405180910390fd5b6000856003600481106104bb576104ba61191a565b5b602002013560001b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327258b22826040518263ffffffff1660e01b815260040161052091906119f4565b602060405180830381865afa15801561053d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105619190611a3b565b6105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790611ab4565b60405180910390fd5b826005015485106105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90611b20565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe8c13b8b8b8b8b6040518563ffffffff1660e01b81526004016106489493929190611c28565b602060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190611a3b565b9050806106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c290611cbb565b60405180910390fd5b600184600701600085815260200190815260200160002060006101000a81548160ff02191690831515021790555083600401600081548092919061070e90611d0a565b9190505550836008016000878152602001908152602001600020600081548092919061073990611d0a565b91905055508a60405161074c91906117bf565b60405180910390207f82ea01a4479f27996bbe8de24f4c8d962035fe2f32a2b130c8c9ca593ab91aa88760405161078391906112c2565b60405180910390a25050505050505050505050565b60606005600083815260200190815260200160002080546107b890611d81565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490611d81565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b50505050509050919050565b600060038260405161084f91906117bf565b9081526020016040518091039020600401549050919050565b600060038260405161087a91906117bf565b9081526020016040518091039020600501549050919050565b6000600254905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060028251101561090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190611dfe565b60405180910390fd5b6002600081548092919061091d90611d0a565b919050555061092d600254610ea6565b60405160200161093d9190611e6a565b604051602081830303815290604052905060048160405161095e91906117bf565b908152602001604051809103902060009054906101000a900460ff16156109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190611ed8565b60405180910390fd5b60006003826040516109cc91906117bf565b90815260200160405180910390209050848160000190816109ed919061209a565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603c84610a3e919061216c565b42610a4991906121ae565b816002018190555060018160030160006101000a81548160ff0219169083151502179055508251816005018190555060005b8351811015610ace57838181518110610a9757610a9661191a565b5b60200260200101518260060160008381526020019081526020016000209081610ac0919061209a565b508080600101915050610a7b565b506001600483604051610ae191906117bf565b908152602001604051809103902060006101000a81548160ff021916908315150217905550816005600060025481526020019081526020016000209081610b28919061209a565b5081604051610b3791906117bf565b60405180910390207f184d51cdcac34bb27b7a2fc48df2288bc62dcad236c9e586b3b2ff0ae96489e7868360020154604051610b749291906121e2565b60405180910390a2509392505050565b6060600383604051610b9691906117bf565b908152602001604051809103902060060160008381526020019081526020016000208054610bc390611d81565b80601f0160208091040260200160405190810160405280929190818152602001828054610bef90611d81565b8015610c3c5780601f10610c1157610100808354040283529160200191610c3c565b820191906000526020600020905b815481529060010190602001808311610c1f57829003601f168201915b5050505050905092915050565b600080600383604051610c5c91906117bf565b908152602001604051809103902090508060030160019054906101000a900460ff1680610c8c5750806002015442115b915050919050565b80600381604051610ca591906117bf565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b9061225e565b60405180910390fd5b81600481604051610d5591906117bf565b908152602001604051809103902060009054906101000a900460ff16610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da790611822565b60405180910390fd5b6000600384604051610dc291906117bf565b908152602001604051809103902090508060030160019054906101000a900460ff1615610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b906122ca565b60405180910390fd5b60008160030160006101000a81548160ff02191690831515021790555060018160030160016101000a81548160ff02191690831515021790555083604051610e6c91906117bf565b60405180910390207f2b77cefdcd8726daf4c7109ee1b2f7b6e696783da95bccd39ee47478e017d06760405160405180910390a250505050565b606060006001610eb584610f74565b01905060008167ffffffffffffffff811115610ed457610ed36110f6565b5b6040519080825280601f01601f191660200182016040528015610f065781602001600182028036833780820191505090505b509050600082602001820190505b600115610f69578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610f5d57610f5c6122ea565b5b04945060008503610f14575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610fd2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610fc857610fc76122ea565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061100f576d04ee2d6d415b85acef81000000008381611005576110046122ea565b5b0492506020810190505b662386f26fc10000831061103e57662386f26fc100008381611034576110336122ea565b5b0492506010810190505b6305f5e1008310611067576305f5e100838161105d5761105c6122ea565b5b0492506008810190505b612710831061108c576127108381611082576110816122ea565b5b0492506004810190505b606483106110af57606483816110a5576110a46122ea565b5b0492506002810190505b600a83106110be576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61112e826110e5565b810181811067ffffffffffffffff8211171561114d5761114c6110f6565b5b80604052505050565b60006111606110c7565b905061116c8282611125565b919050565b600067ffffffffffffffff82111561118c5761118b6110f6565b5b611195826110e5565b9050602081019050919050565b82818337600083830152505050565b60006111c46111bf84611171565b611156565b9050828152602081018484840111156111e0576111df6110e0565b5b6111eb8482856111a2565b509392505050565b600082601f830112611208576112076110db565b5b81356112188482602086016111b1565b91505092915050565b6000819050919050565b61123481611221565b811461123f57600080fd5b50565b6000813590506112518161122b565b92915050565b6000806040838503121561126e5761126d6110d1565b5b600083013567ffffffffffffffff81111561128c5761128b6110d6565b5b611298858286016111f3565b92505060206112a985828601611242565b9150509250929050565b6112bc81611221565b82525050565b60006020820190506112d760008301846112b3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061132261131d611318846112dd565b6112fd565b6112dd565b9050919050565b600061133482611307565b9050919050565b600061134682611329565b9050919050565b6113568161133b565b82525050565b6000602082019050611371600083018461134d565b92915050565b600080fd5b60008190508260206002028201111561139857611397611377565b5b92915050565b6000819050826040600202820111156113ba576113b9611377565b5b92915050565b6000819050826020600402820111156113dc576113db611377565b5b92915050565b6000806000806000806101c08789031215611400576113ff6110d1565b5b600087013567ffffffffffffffff81111561141e5761141d6110d6565b5b61142a89828a016111f3565b965050602061143b89828a0161137c565b955050606061144c89828a0161139e565b94505060e061145d89828a0161137c565b93505061012061146f89828a016113c0565b9250506101a061148189828a01611242565b9150509295509295509295565b6000602082840312156114a4576114a36110d1565b5b60006114b284828501611242565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114f55780820151818401526020810190506114da565b60008484015250505050565b600061150c826114bb565b61151681856114c6565b93506115268185602086016114d7565b61152f816110e5565b840191505092915050565b600060208201905081810360008301526115548184611501565b905092915050565b600060208284031215611572576115716110d1565b5b600082013567ffffffffffffffff8111156115905761158f6110d6565b5b61159c848285016111f3565b91505092915050565b60006115b082611329565b9050919050565b6115c0816115a5565b82525050565b60006020820190506115db60008301846115b7565b92915050565b600067ffffffffffffffff8211156115fc576115fb6110f6565b5b602082029050602081019050919050565b600061162061161b846115e1565b611156565b9050808382526020820190506020840283018581111561164357611642611377565b5b835b8181101561168a57803567ffffffffffffffff811115611668576116676110db565b5b80860161167589826111f3565b85526020850194505050602081019050611645565b5050509392505050565b600082601f8301126116a9576116a86110db565b5b81356116b984826020860161160d565b91505092915050565b6000806000606084860312156116db576116da6110d1565b5b600084013567ffffffffffffffff8111156116f9576116f86110d6565b5b611705868287016111f3565b935050602061171686828701611242565b925050604084013567ffffffffffffffff811115611737576117366110d6565b5b61174386828701611694565b9150509250925092565b60008115159050919050565b6117628161174d565b82525050565b600060208201905061177d6000830184611759565b92915050565b600081905092915050565b6000611799826114bb565b6117a38185611783565b93506117b38185602086016114d7565b80840191505092915050565b60006117cb828461178e565b915081905092915050565b7f456c656374696f6e20646f65736e277420657869737400000000000000000000600082015250565b600061180c6016836114c6565b9150611817826117d6565b602082019050919050565b6000602082019050818103600083015261183b816117ff565b9050919050565b7f456c656374696f6e206e6f742061637469766500000000000000000000000000600082015250565b60006118786013836114c6565b915061188382611842565b602082019050919050565b600060208201905081810360008301526118a78161186b565b9050919050565b7f566f74696e6720636c6f73656400000000000000000000000000000000000000600082015250565b60006118e4600d836114c6565b91506118ef826118ae565b602082019050919050565b60006020820190508181036000830152611913816118d7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f446f75626c6520766f74653a20546869732070726f6f662068617320616c726560008201527f616479206265656e207573656400000000000000000000000000000000000000602082015250565b60006119a5602d836114c6565b91506119b082611949565b604082019050919050565b600060208201905081810360008301526119d481611998565b9050919050565b6000819050919050565b6119ee816119db565b82525050565b6000602082019050611a0960008301846119e5565b92915050565b611a188161174d565b8114611a2357600080fd5b50565b600081519050611a3581611a0f565b92915050565b600060208284031215611a5157611a506110d1565b5b6000611a5f84828501611a26565b91505092915050565b7f566f74657220636f6d6d69746d656e74206e6f74207265676973746572656400600082015250565b6000611a9e601f836114c6565b9150611aa982611a68565b602082019050919050565b60006020820190508181036000830152611acd81611a91565b9050919050565b7f496e76616c69642063616e646964617465000000000000000000000000000000600082015250565b6000611b0a6011836114c6565b9150611b1582611ad4565b602082019050919050565b60006020820190508181036000830152611b3981611afd565b9050919050565b82818337505050565b611b5560408383611b40565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b611b8560408383611b40565b5050565b6000611b958383611b79565b60408301905092915050565b600082905092915050565b6000604082019050919050565b611bc281611b59565b611bcc8184611b64565b9250611bd782611b6f565b8060005b83811015611c1057611bed8284611ba1565b611bf78782611b89565b9650611c0283611bac565b925050600181019050611bdb565b505050505050565b611c2460808383611b40565b5050565b600061018082019050611c3e6000830187611b49565b611c4b6040830186611bb9565b611c5860c0830185611b49565b611c66610100830184611c18565b95945050505050565b7f496e76616c6964205a4b2070726f6f6600000000000000000000000000000000600082015250565b6000611ca56010836114c6565b9150611cb082611c6f565b602082019050919050565b60006020820190508181036000830152611cd481611c98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d1582611221565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d4757611d46611cdb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d9957607f821691505b602082108103611dac57611dab611d52565b5b50919050565b7f4e656564206d696e20322063616e646964617465730000000000000000000000600082015250565b6000611de86015836114c6565b9150611df382611db2565b602082019050919050565b60006020820190508181036000830152611e1781611ddb565b9050919050565b7f756e692d766f74652d0000000000000000000000000000000000000000000000600082015250565b6000611e54600983611783565b9150611e5f82611e1e565b600982019050919050565b6000611e7582611e47565b9150611e81828461178e565b915081905092915050565b7f496e7465726e616c206475706c6963617465204944206572726f720000000000600082015250565b6000611ec2601b836114c6565b9150611ecd82611e8c565b602082019050919050565b60006020820190508181036000830152611ef181611eb5565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f5a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f1d565b611f648683611f1d565b95508019841693508086168417925050509392505050565b6000611f97611f92611f8d84611221565b6112fd565b611221565b9050919050565b6000819050919050565b611fb183611f7c565b611fc5611fbd82611f9e565b848454611f2a565b825550505050565b600090565b611fda611fcd565b611fe5818484611fa8565b505050565b5b8181101561200957611ffe600082611fd2565b600181019050611feb565b5050565b601f82111561204e5761201f81611ef8565b61202884611f0d565b81016020851015612037578190505b61204b61204385611f0d565b830182611fea565b50505b505050565b600082821c905092915050565b600061207160001984600802612053565b1980831691505092915050565b600061208a8383612060565b9150826002028217905092915050565b6120a3826114bb565b67ffffffffffffffff8111156120bc576120bb6110f6565b5b6120c68254611d81565b6120d182828561200d565b600060209050601f83116001811461210457600084156120f2578287015190505b6120fc858261207e565b865550612164565b601f19841661211286611ef8565b60005b8281101561213a57848901518255600182019150602085019450602081019050612115565b868310156121575784890151612153601f891682612060565b8355505b6001600288020188555050505b505050505050565b600061217782611221565b915061218283611221565b925082820261219081611221565b915082820484148315176121a7576121a6611cdb565b5b5092915050565b60006121b982611221565b91506121c483611221565b92508282019050808211156121dc576121db611cdb565b5b92915050565b600060408201905081810360008301526121fc8185611501565b905061220b60208301846112b3565b9392505050565b7f4f6e6c792061646d696e00000000000000000000000000000000000000000000600082015250565b6000612248600a836114c6565b915061225382612212565b602082019050919050565b600060208201905081810360008301526122778161223b565b9050919050565b7f416c726561647920656e64656400000000000000000000000000000000000000600082015250565b60006122b4600d836114c6565b91506122bf8261227e565b602082019050919050565b600060208201905081810360008301526122e3816122a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212203c1f38ab27f5abcb5c0a32bb57bbbcb8c9b35339d8dd64fb90ea2fa22ad8050064736f6c63430008180033",
            "linkReferences": {},
            "deployedLinkReferences": {}
        }

    ];

    let provider, signer, contract;
    let currentElectionId = null;
    let lastTxHash = null;
    let timerInterval;
    let resultChart;

    const connectWalletBtn = document.getElementById('connectWalletBtn');
    const startVotingBtn = document.getElementById('startVotingBtn');
    const endVotingBtn = document.getElementById('endVotingBtn');
    const copyLinkBtn = document.getElementById('copyLinkBtn');
    const copyTxnBtn = document.getElementById('copyTxnBtn');
    const addCandidateBtn = document.getElementById('addCandidateBtn');
    const electionIdDisplay = document.getElementById('electionIdDisplay');
    const voteCountDisplay = document.getElementById('voteCount');
    const timerDisplay = document.getElementById('timer');
    const timerCircle = document.querySelector('.timer-circle');

    function init() {
        connectWalletBtn.addEventListener('click', connectWallet);
        startVotingBtn.addEventListener('click', startElection);
        endVotingBtn.addEventListener('click', endElection);
        copyLinkBtn.addEventListener('click', copyVotingLink);
        copyTxnBtn.addEventListener('click', () => copyText(lastTxHash));
        addCandidateBtn.addEventListener('click', addCandidate);
        initializeChart();
        addCandidate();
        addCandidate();
    }

    async function connectWallet() {
        if (typeof window.ethereum === 'undefined') return alert('MetaMask is not installed.');
        try {
            await window.ethereum.request({ method: 'eth_requestAccounts' });
            provider = new ethers.providers.Web3Provider(window.ethereum);
            signer = provider.getSigner();
            contract = new ethers.Contract(contractAddress, contractABI, signer);
            const address = await signer.getAddress();

            sessionStorage.setItem('connectedWallet', address);

            connectWalletBtn.textContent = `Connected: ${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
            connectWalletBtn.disabled = true;
            startVotingBtn.disabled = false;
            console.log("Wallet connected. Fetching latest election state...");
            await updateDashboardWithLatestElection();
        } catch (error) {
            console.error("Failed to connect wallet:", error);
            alert(`Error connecting wallet: ${error.message}`);
        }
    }

    async function updateDashboardWithLatestElection() {
        if (!contract) return;
        clearInterval(timerInterval);
        electionIdDisplay.textContent = "Loading...";
        try {
            const nextCounter = await contract.getNextElectionCounter();
            if (nextCounter.eq(0)) {
                console.log("No elections created yet.");
                electionIdDisplay.textContent = "No elections yet";
                setCreateMode();
                resetUIForNewElection();
                return;
            }

            const latestElectionCounter = nextCounter;
            currentElectionId = await contract.getGeneratedElectionId(latestElectionCounter);

            if (!currentElectionId) {
                electionIdDisplay.textContent = `Could not find ID for counter ${latestElectionCounter}`;
                return;
            }

            electionIdDisplay.textContent = "Fetching details...";
            const filter = contract.filters.ElectionCreated(currentElectionId, null, null);
            const events = await contract.queryFilter(filter, -5000, 'latest');

            if (events.length > 0) {
                const latestEvent = events[events.length - 1];
                const block = await latestEvent.getBlock();
                const startTime = block.timestamp;
                const endTime = latestEvent.args.endTime.toNumber();
                const electionName = latestEvent.args.name;

                lastTxHash = latestEvent.transactionHash;

                electionIdDisplay.textContent = currentElectionId;
                document.getElementById('votingTopic').value = electionName;
                copyLinkBtn.disabled = false;

                const nowInSeconds = Math.floor(Date.now() / 1000);
                const isOver = await contract.showResult(currentElectionId);

                if (isOver) {
                    timerDisplay.textContent = "Ended";
                    timerCircle.style.background = `conic-gradient(#ef4444 100%, #e5e7eb 100%)`;
                    setCreateMode();
                } else {
                    startBlockchainTimer(startTime, endTime);
                    setVoteMode();
                }
            } else {
                electionIdDisplay.textContent = `Event not found for ID: ${currentElectionId}`;
            }
            await updateTotalVoteCount();
            await showResults();
        } catch (error) {
            console.error("Could not update dashboard:", error);
            electionIdDisplay.textContent = "Error fetching ID";
            if (error.code === -32603) {
                alert("Network Error: Could not fetch data (Gateway Timeout). Please check your network in MetaMask.");
            }
        }
    }

    async function updateTotalVoteCount() {
        if (contract && currentElectionId) {
            try {
                const count = await contract.getTotalVotes(currentElectionId);
                voteCountDisplay.textContent = count.toString();
            } catch (err) {
                voteCountDisplay.textContent = 'N/A';
            }
        }
    }

    async function startElection() {
        if (!contract) return alert('Please connect your wallet first.');

        const topic = document.getElementById('votingTopic').value;
        const duration = document.getElementById('timerInput').value;
        const candidateInputs = document.querySelectorAll('.candidate-input');
        const candidateNames = Array.from(candidateInputs).map(input => input.value).filter(name => name.trim() !== '');

        if (!topic || !duration || candidateNames.length < 2) return alert('Please fill in topic, duration, and at least two candidates.');

        startVotingBtn.textContent = 'Confirm in MetaMask...';
        startVotingBtn.disabled = true;

        try {
            const tx = await contract.createElection(topic, duration, candidateNames);

            trackTransaction(tx.hash);
            startVotingBtn.textContent = 'Confirming on Blockchain...';

            const receipt = await tx.wait();
            lastTxHash = receipt.transactionHash;
            console.log("Transaction confirmed:", receipt);

            await updateDashboardWithLatestElection();
            alert('Election created successfully! Updating dashboard...');

            saveCriteria(currentElectionId);

        } catch (error) {
            console.error("Election creation failed:", error);
            alert(`Error creating election: ${error.message || error}`);
        } finally {
            startVotingBtn.textContent = 'Start Voting';
            if (signer) startVotingBtn.disabled = false;
        }
    }

    async function endElection() {
        if (!contract || !currentElectionId) return alert('No active election selected.');

        endVotingBtn.textContent = "Ending...";
        endVotingBtn.disabled = true;

        try {
            const tx = await contract.endElection(currentElectionId);
            trackTransaction(tx.hash);
            const receipt = await tx.wait();
            lastTxHash = receipt.transactionHash;

            await updateDashboardWithLatestElection();
            alert('Election ended successfully!');

        } catch (error) {
            console.error("Failed to end election:", error);
            alert(`Error ending election: ${error.message}`);
        } finally {
            endVotingBtn.textContent = "End Voting";
            if (signer) endVotingBtn.disabled = false;
        }
    }

    async function showResults() {
        if (!contract || !currentElectionId) {
            initializeChart([], []);
            updateResultList([], []);
            return;
        };
        try {
            const canShowResult = await contract.showResult(currentElectionId);
            if (!canShowResult) {
                initializeChart([], []);
                updateResultList([], []);
                return;
            }
            const candidateCountBigNum = await contract.getCandidateCount(currentElectionId);
            const candidateCount = candidateCountBigNum.toNumber();
            const labels = [];
            const data = [];

            for (let i = 0; i < candidateCount; i++) {
                const name = await contract.getCandidateName(currentElectionId, i);
                const votes = await contract.getVotesForCandidate(currentElectionId, i);
                labels.push(name);
                data.push(votes.toNumber());
            }

            initializeChart(labels, data);
            updateResultList(labels, data);
        } catch (err) {
            console.error("Could not display results:", err);
            initializeChart([], []);
        }
    }

    function setCreateMode() {
        startVotingBtn.classList.remove('hidden');
        endVotingBtn.classList.add('hidden');
        if (signer) startVotingBtn.disabled = false;
    }

    function setVoteMode() {
        startVotingBtn.classList.add('hidden');
        endVotingBtn.classList.remove('hidden');
        if (signer) endVotingBtn.disabled = false;
    }

    function addCandidate() {
        const box = document.getElementById("candidates");
        const input = document.createElement("input");
        input.className = "candidate-input";
        input.placeholder = `Candidate ${box.children.length + 1} name...`;
        box.appendChild(input);
    }

    function resetUIForNewElection() {
        document.getElementById('votingTopic').value = '';
        document.getElementById('timerInput').value = '';
        document.getElementById('candidates').innerHTML = '';
        addCandidate();
        addCandidate();
        timerDisplay.textContent = '00:00';
        timerCircle.style.background = `conic-gradient(#e5e7eb 0%, #e5e7eb 100%)`;
        initializeChart([], []);
        updateResultList([], []);
    }

    function startBlockchainTimer(startTime, endTime) {
        clearInterval(timerInterval);
        const a_second_in_ms = 1000;
        const totalDuration = endTime - startTime;

        timerInterval = setInterval(() => {
            const nowInSeconds = Math.floor(Date.now() / a_second_in_ms);
            const secondsLeft = endTime - nowInSeconds;

            if (secondsLeft < 0) {
                clearInterval(timerInterval);
                timerDisplay.textContent = "Ended";
                timerCircle.style.background = `conic-gradient(#ef4444 100%, #e5e7eb 100%)`;
                setCreateMode();
                showResults();
                return;
            }

            const min = Math.floor(secondsLeft / 60);
            const sec = secondsLeft % 60;
            timerDisplay.textContent = `${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;

            const elapsed = nowInSeconds - startTime;
            const percentage = totalDuration > 0 ? Math.min(100, (elapsed / totalDuration) * 100) : 0;
            timerCircle.style.background = `conic-gradient(#38bdf8 ${percentage}%, #e5e7eb ${percentage}%)`;

            if (secondsLeft % 10 === 0) updateTotalVoteCount();
        }, a_second_in_ms);
    }

    function initializeChart(labels = [], data = []) {
        const ctx = document.getElementById("resultChart").getContext("2d");
        const backgroundColors = ['#4ade80', '#f87171', '#38bdf8', '#fbbf24', '#a78bfa', '#f472b6', '#22d3ee', '#86efac'];
        if (resultChart) resultChart.destroy();
        resultChart = new Chart(ctx, {
            type: "doughnut",
            data: {
                labels: labels.length > 0 ? labels : ["No data"],
                datasets: [{ data: data.length > 0 ? data : [1], backgroundColor: data.length > 0 ? backgroundColors.slice(0, data.length) : ["#e5e7eb"], borderWidth: 0 }]
            },
            options: { cutout: "70%", plugins: { legend: { display: false }, tooltip: { enabled: data.length > 0 } }, responsive: true }
        });
    }

    function updateResultList(labels, data) {
        const list = document.getElementById('resultList');
        list.innerHTML = '';
        const totalVotes = data.reduce((sum, current) => sum + current, 0);
        if (labels.length === 0 || !currentElectionId) {
            const li = document.createElement('li');
            li.textContent = 'Results are not available.';
            list.appendChild(li);
            return;
        }
        if (totalVotes === 0 && currentElectionId) {
            const li = document.createElement('li');
            li.textContent = 'No votes cast yet.';
            list.appendChild(li);
            return;
        }
        labels.forEach((label, index) => {
            const percentage = totalVotes > 0 ? ((data[index] / totalVotes) * 100).toFixed(1) : 0;
            const li = document.createElement('li');
            li.textContent = `${percentage}% ${label} (${data[index]} votes)`;
            list.appendChild(li);
        });
    }

    function copyText(text) {
        if (!text || text === '0xTxHash123...') return alert("Nothing to copy yet.");
        navigator.clipboard.writeText(text).then(() => alert("Copied to clipboard!")).catch(err => {
            alert("Failed to copy text.");
            console.error('Clipboard copy failed', err);
        });
    }

    function getVotingPagePath() {
        // On localhost (any port), use /frontend/vote.html
        if (
            window.location.hostname === 'localhost' ||
            window.location.hostname === '127.0.0.1'
        ) {
            return '/frontend/vote.html';
        } else {
            return '/vote.html';
        }
    }

    function copyVotingLink() {
        if (!currentElectionId) return alert("No election ID available to generate a link.");
        const voteUrl = `${window.location.origin}${getVotingPagePath()}?electionId=${currentElectionId}`;
        copyText(voteUrl);
    }


    function setStepperStatus(currentStep) {
        for (let i = 1; i <= 4; i++) {
            const step = document.getElementById(`step-${i}`);
            if (!step) continue;
            if (i < currentStep) {
                step.classList.add('completed');
                step.classList.remove('active');
            } else if (i === currentStep) {
                if (i === 4) {
                    step.classList.add('completed');
                    step.classList.remove('active');
                } else {
                    step.classList.add('active');
                    step.classList.remove('completed');
                }

            } else {
                step.classList.remove('active', 'completed');
            }
        }
    }

    // Set timestamp text for each step
    function setStepTimestamp(step, ts) {
        const el = document.getElementById(`ts-${step}`);
        if (el) el.textContent = ts;
    }

    // Function to track transaction status live and update UI
    async function trackTransaction(txHash) {
        if (!provider) return;

        // Step 1: Transaction passed ZKP circuit (assumed immediate)
        setStepperStatus(1);
        setStepTimestamp(1, new Date().toLocaleString());

        // Step 2: Transaction signed (immediate)
        setStepperStatus(2);
        setStepTimestamp(2, new Date().toLocaleString());

        // Step 3: Waiting for block confirmation (immediate simulation)
        setStepperStatus(3);
        setStepTimestamp(3, new Date().toLocaleString());

        // Step 4: Wait for actual blockchain confirmation
        try {
            const receipt = await provider.waitForTransaction(txHash);
            setStepperStatus(4);
            setStepTimestamp(4, new Date().toLocaleString());
        } catch (err) {
            console.error("Transaction confirmation error:", err);
            // Optionally handle error UI here
        }
    }




    // Start the application
    init();
});
// </script>

const saveCriteria = async (yourElectionId) => {

    const criteria = {
        onlyIITP: document.getElementById('onlyIITP').checked,
        account10Days: document.getElementById('account10Days').checked,
        completedPartX: document.getElementById('completedPartX').checked,
        connectedGoogleAccount: document.getElementById('connectedGoogleAccount').checked
    };

    const topic = document.getElementById('votingTopic').value;

    if (!topic.trim()) {
        alert("Please enter a voting topic.");
        return;
    }

    try {
        const response = await fetch(`${BACKEND_URL}/api/Save-Election-Criteria`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({
                election_id: yourElectionId, // Replace with actual election ID
                criteria: criteria,
                topic: topic
            })
        });
        const data = await response.json();
        // handle success (e.g., show a confirmation message)
        if (data.status === "1") {
            console.log("Criteria set successfully:", data);
        } else {
            console.warn("Failed to set criteria:", data.message);
        }
    } catch (error) {
        console.error("Error setting criteria:", error);
        alert("Failed to set election criteria. Please try again.");
    }
};

// Update stepper UI based on current step (1 to 4)
